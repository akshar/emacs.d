* Clojure
** clj-kondo
#+BEGIN_SRC emacs-lisp :results silent
(use-package flycheck-clj-kondo
  :ensure t)
#+END_SRC

** clojure-mode
#+BEGIN_SRC emacs-lisp :results silent
(use-package clojure-mode
  :ensure t
  :config
  (require 'flycheck-clj-kondo))
#+END_SRC

** clojure-mode-extra-font-locking
   #+BEGIN_SRC emacs-lisp :results silent
     (use-package clojure-mode-extra-font-locking
       :ensure t
       :defer 3)
   #+END_SRC

** aggresive-indent
   #+BEGIN_SRC emacs-lisp :results silent
     (use-package aggressive-indent
       :ensure t
       :config (add-hook 'clojure-mode-hook 'aggressive-indent-mode))
   #+END_SRC

** paredit
   #+BEGIN_SRC emacs-lisp :results silent
     (use-package paredit
       :ensure t
       :init
       (add-hook 'clojure-mode-hook 'enable-paredit-mode)
       (add-hook 'cider-repl-mode-hook 'enable-paredit-mode)
       (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode))
   #+END_SRC

** cider
   #+BEGIN_SRC emacs-lisp :results silent
           (use-package cider
	   :ensure t
           :defer 3
           :init (setq cider-repl-pop-to-buffer-on-connect t
                        cider-save-file-on-load t
           cider-mode-line nil
           cider-prompt-for-symbol nil
           cider-show-error-buffer t
           cider-auto-select-error-buffer t
           cider-repl-history-file "~/.emacs.d/cider-history"
           cider-repl-wrap-history t
           cider-repl-history-size 100
           cider-repl-use-clojure-font-lock t
           cider-docview-fill-column 70
           cider-stacktrace-fill-column 76
           nrepl-hide-special-buffers t
           nrepl-popup-stacktraces nil
           nrepl-log-messages nil
           cider-repl-use-pretty-printing t
           cider-repl-display-help-banner nil
           cider-repl-result-prefix ";; => ")
           :config
	   (define-key cider-mode-map (kbd "M-c")
	   'cider-pprint-eval-defun-to-comment)
           (add-hook 'cider-mode-hook #'eldoc-mode)
           (add-hook 'cider-mode-hook #'company-mode)
           (add-hook 'cider-repl-mode-hook #'eldoc-mode)
           (add-hook 'cider-repl-mode-hook #'company-mode)
           (define-key cider-repl-mode-map (kbd "s-k")
             'cider-repl-clear-buffer))
   #+END_SRC

** clj-refactor
   #+BEGIN_SRC emacs-lisp :results silent
     (use-package clj-refactor
       :ensure t
       :defer 5)
    #+END_SRC

** kibit
  #+BEGIN_SRC emacs-lisp :results silent
  (use-package kibit-helper
  :ensure t)
 #+END_SRC
    
