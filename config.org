* Interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)

(defalias 'list-buffers 'ibuffer)
(windmove-default-keybindings)

(global-set-key (kbd "<f5>") 'revert-buffer)
(global-hl-line-mode t) ;;highlight current line
(global-auto-revert-mode 1) ;; revert-buffer on save.
#+END_SRC


* try 
  Try out emacs packages without installing them.
  #+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
  #+END_SRC

  
* which key 
  Keybindings help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
  :ensure t
  :config (which-key-mode))
  #+END_SRC


* Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC



* Ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC


* Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind (("M-y" . counsel-yank-pop)
    :map ivy-minibuffer-map
    ("M-y" . ivy-next-line)))
#+END_SRC


* Swiper
  Isearch
  #+BEGIN_SRC emacs-lisp
  (use-package swiper
   :ensure t
   :config (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
  #+END_SRC


* Autocomplete 
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)))
#+END_SRC


* Reveal.js
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure ox-reveal)
  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)
#+END_SRC


* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC


* Customizations:
** Theme
 #+BEGIN_SRC emacs-lisp
 (use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t))
 #+END_SRC

** Beacon
 #+BEGIN_SRC emacs-lisp
   (use-package beacon
     :ensure t
     :config
     (beacon-mode 1)
     (setq beacon-color "red")
     (setq beacon-blink-delay 0.4)
     (setq beacon-blink-duration 0.4)
     (setq beacon-blink-when-point-moves 7)
     (setq beacon-push-mark 5)
     (setq beacon-size 25))
 #+END_SRC
  
 
* YASnippet
  It allows you to type an abbreviation and automatically expand it into function templates.
  (https://github.com/joaotavora/yasnippet#where-are-the-snippets => follow instructions to add snippets)
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init (yas-global-mode 1))
  #+END_SRC


* Undo Tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init 
      (global-undo-tree-mode))
  #+END_SRC



* Expand Region
  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))
  #+END_SRC


* Web Mode
  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :defer t
      :init (add-hook 'before-save-hook 'web-mode-buffer-indent)    ;;indent buffer before saving
      :mode (("\\.html?\\'" . web-mode)
	     ("\\.css?\\'" . web-mode)
	     ("\\.mustache\\'" . web-mode)
	     ("\\.erb\\'" . web-mode))
      :config
      (setq-default indent-tabs-mode nil)
      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-code-indent-offset 2)
      (setq web-mode-css-indent-offset 2)
      (setq web-mode-script-padding 0)
      (setq web-mode-enable-auto-expanding t)
      (setq web-mode-enable-css-colorization t)
      (setq web-mode-enable-auto-pairing nil)
      (setq web-mode-enable-auto-closing t)
      (setq web-mode-enable-auto-quoting t)
      (setq web-mode-auto-close-style 2)      ;;close after opening-tag
      (setq web-mode-auto-quote-style 2))     ;;use single-quotes for attributes(requires v15)

  #+END_SRC




* Tramp
  #+BEGIN_SRC emacs-lisp
    (use-package tramp
      :defer 4
      :config
	  (setq tramp-default-method "ssh"))
  #+END_SRC

